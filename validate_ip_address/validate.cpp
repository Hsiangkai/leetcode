#include <string>
#include <iostream>

using namespace std;

class Solution {
private:
  bool isIPv4Token(const string &token) {
    int count = 0;
    for (int i = 0; i < token.length(); ++i) {
      if (token[i] == '.')
	break;
      if ('0' > token[i] || token[i] > '9')
	return false;
      count++;
    }
    if (count == 0)
      return false;
    return true;
  }

  bool isIPv4(const string &IP) {
    int num;
    int count = 0;
    int pos = 0;
    int end;
    while (1) {
      end = IP.find_first_of(".", pos);
      if (end == string::npos)
	end = IP.length();
      string token = IP.substr(pos, end - pos);
      if (token.length() > 1 && token[0] == '0')
	return false;
      else if (token.length() > 0 && token.length() < 4 && isIPv4Token(token))
        num = stoi(token);
      else
	return false;
      if (num < 0 || 255 < num)
	return false;
      count++;
      pos = IP.find_first_of(".", pos);
      if (pos != string::npos)
	pos++;
      else
	break;
    }

    if (count != 4)
      return false;

    return true;
  }

  bool isIPv6Token(const string &token) {
    if (token.length() == 0)
      return false;

    if (token.length() > 4)
      return false;

    for (int i = 0; i < token.length(); ++i) {
      if (('0' <= token[i] && token[i] <= '9') ||
	  ('a' <= token[i] && token[i] <= 'f') ||
	  ('A' <= token[i] && token[i] <= 'F')) {
	continue;
      }
      return false;
    }

    return true;
  }

  bool isIPv6(const string &IP) {
    int count = 0;
    int start = 0;
    int end;
    int len;
    while (1) {
      end = IP.find_first_of(":", start);
      if (end == string::npos)
	end = IP.length();
      string token = IP.substr(start, end - start);
      if (!isIPv6Token(token))
	return false;
      count++;
      start = IP.find_first_of(":", start);
      if (start != string::npos)
	start++;
      else
	break;
    }

    if (count != 8)
      return false;

    return true;
  }

public:
  string validIPAddress(string IP) {
    if (IP.find_first_of(".") != string::npos) {
      if (isIPv4(IP))
	return "IPv4";
      else
	return "Neither";
    } else if (IP.find_first_of(":") != string::npos) {
      if (isIPv6(IP))
	return "IPv6";
      else
	return "Neither";
    } else {
      return "Neither";
    }
  }
};

int main() {
  Solution sol;
  //cout << sol.validIPAddress("2001:0db8:85bA:0:0:8A2E:0370:7334") << endl;
  cout << sol.validIPAddress("01.01.01.01") << endl;
  //cout << sol.validIPAddressendl;
  return 0;
}
